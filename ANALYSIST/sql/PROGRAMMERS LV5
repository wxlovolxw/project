/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

상품을 구매한 회원 비율 구하기

USER_INFO 테이블과 ONLINE_SALE 테이블에서 2021년에 가입한 전체 회원들 중 상품을 구매한 회원수와 상품을 구매한 회원의 비율(=2021년에 가입한 회원 중 상품을 구매한 회원수 / 2021년에 가입한 전체 회원 수)을 년, 월 별로 출력하는 SQL문을 작성해주세요. 상품을 구매한 회원의 비율은 소수점 두번째자리에서 반올림하고, 전체 결과는 년을 기준으로 오름차순 정렬해주시고 년이 같다면 월을 기준으로 오름차순 정렬해주세요.

가입한 년도가 2021년이여야 한다. 다시

SELECT COUNT(DISTINCT(USER_ID)) AS PURCHASED_USERS, YEAR(SALES_DATE) AS YEAR, MONTH(SALES_DATE) AS MONTH FROM ONLINE_SALE 
GROUP BY YEAR, MONTH

를 통해서 년과 월 별로 구매한 유저 수를 카운트 할 수 있다.

SELECT COUNT(DISTINCT(USER_ID)) FROM USER_INFO
WHERE YEAR(JOINED) = 2021
를 통해서 전체 회원수를 카운트 할 수 있다.

SELECT COUNT(DISTINCT(USER_ID)) AS PURCHASED_USERS, YEAR(SALES_DATE) AS YEAR, MONTH(SALES_DATE) AS MONTH FROM ONLINE_SALE 
WHERE USER_ID IN (SELECT DISTINCT(USER_ID) FROM USER_INFO
    WHERE YEAR(JOINED) = 2021)
GROUP BY YEAR, MONTH

-----------------------------------------------------------------------------------------------------------------------

SELECT YEAR(SALES_DATE) AS YEAR, MONTH(SALES_DATE) AS MONTH, COUNT(DISTINCT(USER_ID)) AS PURCHASED_USERS, ROUND(COUNT(DISTINCT(USER_ID)) / (SELECT COUNT(DISTINCT(USER_ID)) 
    FROM USER_INFO
    WHERE YEAR(JOINED) = 2021),1) AS PUCHASED_RATIO
FROM ONLINE_SALE 
WHERE USER_ID IN (SELECT DISTINCT(USER_ID) FROM USER_INFO
    WHERE YEAR(JOINED) = 2021)
GROUP BY YEAR, MONTH
ORDER BY YEAR, MONTH

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

멸종위기의 대장균 찾기

각 세대별 자식이 없는 개체의 수(COUNT)와 세대(GENERATION)를 출력하는 SQL문을 작성해주세요. 이때 결과는 세대에 대해 오름차순 정렬해주세요. 단, 모든 세대에는 자식이 없는 개체가 적어도 1개체는 존재합니다.

ECOLI_DATE 테이블에서 ID와 PARENT_ID만 필요하다. SELF JOIN을 통해서 세대수를 먼저 구하는 것이 중요해 보인다.
추가적으로 필요한 컬럼은 몇세대인지와 자녀의 유무를 추가로 생성해야 할 듯 싶다.

루프의 형태로 도는 것이 좋아보인다. 방법을 생각해보자.

재귀 CTE를 통해 트리를 만들 수 있어 보인다.

SELECT ID, PARENT_ID, 1 AS GENERATION
FROM ECOLI_DATA
WHERE PARENT_ID IS NULL

자기 자신과 조인하여 루프를 돌리는 것과 같은 방식이다.
먼저 가장 부모세대의 GENERATION 을 1로 초기화 하고 해당 테이블을 생성한다.

CTE
ID GENERATION
1  1
2  1

그리고 이 테이블을 조인한다.

ID PARENT_ID GENERATION
3  2         1 + 1
4  2         2
5  2         2

JOIN 이기 때문에 3,4,5에 대해서만 테이블을 생성

그러면 CTE는 

ID GENERATION
1  1
2  1
3  2
4  2
5  2

로 갱신된다.

WITH RECURSIVE CTE AS (SELECT ID, PARENT_ID, 1 AS GENERATION
    FROM ECOLI_DATA
    WHERE PARENT_ID IS NULL

    UNION ALL

    SELECT A.ID, A.PARENT_ID, CTE.GENERATION + 1 AS GENERATION
    FROM ECOLI_DATA A
    JOIN CTE ON CTE.ID = A.PARENT_ID)
    
SELECT ID, GENERATION
FROM CTE 

를 통해서 각 아이디별 세대를 출력할 수 있다. 여기에 세대별로 자녀가 있는지를 확인하면 된다.

-- 코드를 작성해주세요
WITH RECURSIVE CTE AS (SELECT ID, PARENT_ID, 1 AS GENERATION
    FROM ECOLI_DATA
    WHERE PARENT_ID IS NULL

    UNION ALL

    SELECT A.ID, A.PARENT_ID, CTE.GENERATION + 1 AS GENERATION
    FROM ECOLI_DATA A
    JOIN CTE ON CTE.ID = A.PARENT_ID)
    
SELECT COUNT(B.ID) AS COUNT, B.GENERATION
FROM CTE AS B
LEFT JOIN CTE AS C ON B.ID = C.PARENT_ID
WHERE C.PARENT_ID IS NULL
GROUP BY GENERATION
ORDER BY GENERATION

마지막으로 재귀를 통해 얻은 CTE에 CTE를 JOIN하여 자녀가 없는 대장균 수를 카운트 하면 된다.