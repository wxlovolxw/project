PROGRAMMERS LV3

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

카테고리 별 도서 판매량 집계하기

SELECT CATEGORY, SUM(SALES)
FROM BOOK_SALES AS BS
LEFT JOIN BOOK AS B ON BS.BOOK_ID = B.BOOK_ID
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = '2022-01'
GROUP BY CATEGORY
ORDER BY CATEGORY

- 총 판매액을 구하는 줄 알고 PRICE를 계속 곱해서 실패했었다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

조건별로 분류하여 주문상태 출력하기

SELECT ORDER_ID, PRODUCT_ID, DATE_FORMAT(OUT_DATE,'%Y-%m-%d') AS OUT_DATE, 
    CASE WHEN OUT_DATE IS NULL THEN '출고미정'
    WHEN OUT_DATE <= DATE_FORMAT('2022-05-01','%Y-%m-%d') THEN '출고완료'
    ELSE '출고대기'
    END AS '출고여부'
FROM FOOD_ORDER
ORDER BY ORDER_ID

- NULL값이 존재할때 주의하기

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

대여 기록이 존재하는 자동차 리스트 구하기

SELECT DISTINCT(C.CAR_ID)
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY AS CH
    LEFT JOIN CAR_RENTAL_COMPANY_CAR AS C
    ON CH.CAR_ID = C.CAR_ID
WHERE C.CAR_TYPE = '세단' AND MONTH(CH.START_DATE) = 10
ORDER BY CAR_ID DESC

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

조건에 맞는 사용자와 총 거래금액 조회하기

SELECT UGU.USER_ID, UGU.NICKNAME, SUM(UGB.PRICE) AS TOTAL_SALES
FROM USED_GOODS_BOARD AS UGB
LEFT JOIN USED_GOODS_USER AS UGU ON UGB.WRITER_ID = UGU.USER_ID
WHERE UGB.STATUS = 'DONE'
GROUP BY UGU.USER_ID
HAVING TOTAL_SALES >= 700000
ORDER BY TOTAL_SALES

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SELECT FOOD_TYPE, REST_ID, REST_NAME, MAX(FAVORITES) AS FAVORITES
FROM REST_INFO
GROUP BY FOOD_TYPE
ORDER BY FOOD_TYPE DESC

각각의 그룹 별로의 MAX값을 갖는 가게를 도출해야 한다.
WHERE 절에 SUBQUARY를 사용하면 될 것 같다.

SELECT FOOD_TYPE, REST_ID, REST_NAME, FAVORITES
FROM REST_INFO
WHERE FAVORITES IN (SELECT MAX(FAVORITES) AS MAX_FAVORITES
    FROM REST_INFO
    GROUP BY FOOD_TYPE)
GROUP BY FOOD_TYPE
ORDER BY FOOD_TYPE DESC

이때 MAX_FAVORITES와 같은 값을 갖는 최댓값이 아닌 데이터가 존재할 수 있으므로 한번더 GROUP BY를 해주었다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

조건에 맞는 사용자 정보 조회하기

SELECT UGU.USER_ID, UGU.NICKNAME, 
    CONCAT(UGU.CITY,' ' ,UGU.STREET_ADDRESS1,' ',UGU.STREET_ADDRESS2) AS '전체주소', 
    CONCAT(SUBSTR(UGU.TLNO,1,3),'-',SUBSTR(UGU.TLNO,4,4),'-',SUBSTR(UGU.TLNO,8,4)) AS '전화번호'  
FROM USED_GOODS_BOARD AS UGB
JOIN USED_GOODS_USER AS UGU ON UGB.WRITER_ID = UGU.USER_ID
GROUP BY UGB.WRITER_ID
HAVING COUNT(*) >= 3
ORDER BY USER_ID DESC

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

부서별 평균 연봉 조회하기

SELECT HE.DEPT_ID, HD.DEPT_NAME_EN, ROUND(AVG(HE.SAL),0) AS AVG_SAL
FROM HR_EMPLOYEES AS HE
JOIN HR_DEPARTMENT AS HD ON HE.DEPT_ID = HD.DEPT_ID
GROUP BY DEPT_ID
ORDER BY AVG_SAL DESC

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

대장균의 크기에 따라 분류하기 1

SELECT ID, 
    CASE WHEN SIZE_OF_COLONY <= 100 THEN 'LOW'
    WHEN SIZE_OF_COLONY > 1000 THEN 'HIGH'
    ELSE 'MEDIUM'
    END AS 'SIZE'
FROM ECOLI_DATA
ORDER BY ID

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

새로운 테이블을 생성하고, COUNTS 컬럼을 추가한다.
COUNTS 컬럼에는 해당 날짜에 대여가 됐으면 1을, 아니라면 0을 출력하도록 한다.

SELECT CAR_ID, CASE WHEN SUM(COUNTS) THEN '대여중' ELSE '대여 가능' END AS AVAILABILITY
FROM (SELECT *, 
        CASE WHEN START_DATE <= '2022-10-16' AND END_DATE >= '2022-10-16' THEN 1
        ELSE 0
        END AS COUNTS
        FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY) AS A
GROUP BY CAR_ID
ORDER BY CAR_ID DESC

그렇다면 해당 날짜와 연관없는 날짜에 COUNTS는 0이 되고, 대여를 하여 대여중이라면 GROUP BY SUM을 하면 1이 대여가 가능하다면 0이 된다.

날짜의 부등호를 잘못 설정하여 코드를 다 짜놓고 틀린 결과가 나오게 되었다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

조회수가 가장 많은 중고거래 게시판의 첨부파일 조회하기

SELECT CONCAT('/home/grep/src/',BOARD_ID,'/',FILE_ID,FILE_NAME,FILE_EXT) AS FILE_PATH
FROM USED_GOODS_FILE
WHERE BOARD_ID = (SELECT UGB.BOARD_ID
    FROM USED_GOODS_FILE AS UGF
    LEFT JOIN USED_GOODS_BOARD AS UGB ON UGF.BOARD_ID = UGB.BOARD_ID
    GROUP BY UGF.BOARD_ID
    ORDER BY SUM(UGB.VIEWS) DESC LIMIT 1)
ORDER BY FILE_ID DESC
    
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

헤비 유저가 소유한 장소

SELECT A.ID, A.NAME, A.HOST_ID 
FROM PLACES AS A
JOIN (SELECT HOST_ID, COUNT(*) AS COUNTS
    FROM PLACES
    GROUP BY HOST_ID) AS B ON A.HOST_ID = B.HOST_ID
WHERE COUNTS >= 2
ORDER BY A.ID

COUNT 수를 테이블로 만들고 JOIN하여 해결

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

대여 횟수가 많은 자동차들의 월별 대여 횟수 구하기

서브 쿼리를 통해 8,9,10월의 CAR_ID 별로 대여 횟수가 5회 이상인 차량의 아이디를 출력하도록 한다.

SELECT MONTH(START_DATE) AS MONTH, CAR_ID, COUNT(*) AS RECORDS
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
WHERE CAR_ID IN (
    SELECT CAR_ID
    FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
    WHERE YEAR(START_DATE) = 2022 AND MONTH(START_DATE) IN (8,9,10)
    GROUP BY CAR_ID
    HAVING COUNT(*) >= 5 ) AND YEAR(START_DATE) = 2022 AND MONTH(START_DATE) IN (8,9,10)
GROUP BY MONTH, CAR_ID
ORDER BY MONTH, CAR_ID DESC

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

특정 조건을 만족하는 물고기별 수와 최대 길이 구하기

SELECT COUNT(*) AS FISH_COUNT, MAX(LENGTH) AS MAX_LENGTH, FISH_TYPE
FROM (SELECT ID, FISH_TYPE, IFNULL(LENGTH, 10) AS LENGTH, DATE_FORMAT(TIME, '%Y/%m/&d') FROM FISH_INFO ) AS A
GROUP BY FISH_TYPE
HAVING AVG(LENGTH) >= 33
ORDER BY FISH_TYPE

서브 쿼리를 통해 길이값이 NULL인 데이터들만 10으로 치환해주면 크게 어려움 없는 문제이다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

대장균들의 자식의 수 구하기

SELECT A.ID, IFNULL(B.COUNT, 0) AS CHILD_COUNT
FROM ECOLI_DATA AS A 
LEFT JOIN
    (SELECT PARENT_ID AS ID, COUNT(*) AS COUNT
    FROM ECOLI_DATA
    GROUP BY PARENT_ID) AS B
    ON A.ID = B.ID
ORDER BY A.ID

마찬가지로 서브쿼리를 생성하여 JOIN 하였다. 이때 자식수 카운트가 없는 개체의 ID는 0으로 처리해야 하므로 IFNULL을 사용하였다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

업그레이드 할 수 없는 아이템 구하기

SELECT ITEM_ID, ITEM_NAME, RARITY
FROM ITEM_INFO
WHERE ITEM_ID NOT IN
    (SELECT DISTINCT(PARENT_ITEM_ID) AS ITEM_ID FROM ITEM_TREE WHERE PARENT_ITEM_ID IS NOT NULL)
ORDER BY ITEM_ID DESC

서브 쿼리를 통해 패런츠아이템아이디가 없는 항목을 골라낸후, 아이템 아이디와 일치하지 않는 항목을만 호출하면 된다.

WHERE () IN () 으로 했을때와는 다르게 NOT IN 으로 하니 아무런 항목도 나오지 않게 되었다.
이 부분을 수정해야 한다.

SELECT ITEM_ID, ITEM_NAME, RARITY
FROM ITEM_INFO
WHERE ITEM_ID NOT IN
    (SELECT DISTINCT(PARENT_ITEM_ID) AS ITEM_ID FROM ITEM_TREE WHERE PARENT_ITEM_ID IS NOT NULL)
ORDER BY ITEM_ID DESC

서브 쿼리 내에 NULL값이 포함되어 잇어 NOT IN이 제대로 작동하지 않았다.
이를 해결하기 위해 서브 쿼리 내의 WHERE 절을 통해 NULL값을 제외하였다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

물고기 종류 별 대어 찾기

GROUP BY를 통해 가장 큰 값들을 찾아내면 되는 문제이다.

SELECT FISH_TYPE, MAX(LENGTH)
FROM FISH_INFO
GROUP BY FISH_TYPE

를 통해 FISH_TYPE 별 최댓값을 출력할 수 있다.
여기서 FISH_TYPE, LENGTH 의 두 컬럼으로 이루어진 테이블이 생성되는데,
이 두 컬럼의 값이 일치하는 ID를 출력할 수 있도록 하는 것이 문제다.

서브쿼리를 조인하여 NULL값이 되지 않는 값들을 출력하면 될 것 같다.

SELECT DISTINCT(A.ID), C.FISH_NAME, B.LENGTH
FROM FISH_INFO AS A
JOIN (SELECT FISH_TYPE, MAX(LENGTH) AS LENGTH
    FROM FISH_INFO
    GROUP BY FISH_TYPE) AS B
ON A.LENGTH = B.LENGTH
JOIN FISH_NAME_INFO AS C
ON A.FISH_TYPE = C.FISH_TYPE
ORDER BY A.ID

테스트 코드만 통과했다 다시 수정해보자.
두번씩 출력되는 값들이 존재한다 이를 해결해야 할 것 같다.
ON 절의 조건을 붙이면 특정 항목이 두번씩 출력된다.

SELECT C.ID, D.FISH_NAME, C.LENGTH
FROM (SELECT A.ID, B.FISH_TYPE, B.MAX_LENGTH AS LENGTH
    FROM FISH_INFO AS A
    JOIN (SELECT FISH_TYPE, MAX(LENGTH) AS MAX_LENGTH
        FROM FISH_INFO
        GROUP BY FISH_TYPE) AS B
    ON A.FISH_TYPE = B.FISH_TYPE
    WHERE A.LENGTH = B.MAX_LENGTH) AS C
JOIN FISH_NAME_INFO AS D
ON C.FISH_TYPE = D.FISH_TYPE
ORDER BY C.ID

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

대장균의 크기에 따라 분류하기 2

SELECT ID, CASE WHEN PERCENT <= 25 THEN 'CRITICAL'
    WHEN 25 < PERCENT AND PERCENT <= 50 THEN 'HIGH'
    WHEN 50 < PERCENT AND PERCENT <= 75 THEN 'MEDIUM'
    ELSE 'LOW' END AS COLONY_NAME
FROM (SELECT ID, (RANK() OVER (ORDER BY SIZE_OF_COLONY DESC)) / (COUNT(*) OVER ())* 100 AS PERCENT
FROM ECOLI_DATA) AS A
ORDER BY ID

비율을 구하기 위해 RANK() OVER 로 순위를 구해주며 순위의 조건은 그 뒤의 ORDER BY를 통해서 한다.
또한 GROUP BY 없이 전체 수를 COUNT 하기 위해서 COUNT OVER를 사용한다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////